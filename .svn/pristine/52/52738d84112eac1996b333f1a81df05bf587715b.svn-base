package com.jd.project.module.admin.evaluation.service;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.jd.common.utils.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.jd.common.support.Convert;
import com.jd.common.utils.file.FileUploadUtils;
import com.jd.framework.web.domain.Result;
import com.jd.framework.web.service.BaseService;
import com.jd.project.module.admin.evaluation.entity.CompanyChecktableFilesEntity;
import com.jd.project.module.admin.evaluation.entity.DynamicEntity;
import com.jd.project.module.admin.evaluation.mapper.CompanyChecktableFilesMapper;
import com.jd.project.module.admin.evaluation.mapper.DynamicMapper;

/**
 * 动态运行记录 服务层实现
 * 
 * @author TrevorPhilips
 * @date 2018-11-29
 */
@Service
@Transactional(rollbackFor = Exception.class)
public class DynamicServiceImpl extends BaseService implements DynamicService {
	protected static final Logger logger = LoggerFactory.getLogger(DynamicServiceImpl.class);
	@Autowired
	private DynamicMapper dynamicMapper;
	@Autowired
	private CompanyChecktableFilesMapper companyChecktableFilesMapper;
	@Autowired
	private CompanyChecktableFilesService companyChecktableFilesService;

	@Value("${upLoadDir}")
	private String upLoadDir;

	/**
	 * 查询动态运行记录信息
	 * 
	 * @param dynamicsId
	 *            动态运行记录ID
	 * @return 动态运行记录信息
	 */
	@Override
	public DynamicEntity selectDynamicById(Long dynamicsId) {
		return dynamicMapper.selectDynamicById(dynamicsId);
	}

	/**
	 * 查询动态运行记录列表
	 * 
	 * @param dynamic
	 *            动态运行记录信息
	 * @return 动态运行记录集合
	 */
	@Override
	public List<DynamicEntity> selectDynamicList(DynamicEntity dynamic) {
		return dynamicMapper.selectDynamicList(dynamic);
	}

	/**
	 * 新增动态运行记录
	 * 
	 * @param dynamic
	 *            动态运行记录信息
	 * @return 结果
	 */
	@Override
	public int insertDynamic(String tempFileId, DynamicEntity dynamic) {
		try {
			//添加成功后将文件和答题记录关联起来
			if(modifyDynamic(dynamic)>0){
				if(tempFileId.endsWith(",")){
					tempFileId=tempFileId.substring(0,tempFileId.length()-1);
				}
				String [] FileIds=tempFileId.split(",");
				Arrays.stream(FileIds).filter(x-> StringUtils.isNotEmpty(x)).forEach(x->{
					CompanyChecktableFilesEntity cf = new CompanyChecktableFilesEntity();
					cf.setChecktableFilesId(Long.parseLong(x));
					/** 结果分类：0 自评 1 复核 2定级 */
					cf.setChecktableFilesType(2);
					cf.setDynamicsId(dynamic.getDynamicsId());
					companyChecktableFilesService.updateCompanyChecktableFiles(cf);
				});
			}
		} catch (Exception e) {
			logger.error("失败文件上传：" + e.getMessage());
			return 0;
		}
		return 1;
	}

	@Override
	public int modifyDynamic(DynamicEntity dynamic) {
		if (null != dynamic.getDynamicsId()) {
			return dynamicMapper.updateDynamic(dynamic);
		}
		return dynamicMapper.insertDynamic(dynamic);
	}

	/**
	 * 修改动态运行记录
	 * 
	 * @param dynamic
	 *            动态运行记录信息
	 * @return 结果
	 */
	@Override
	public int updateDynamic(DynamicEntity dynamic) {
		return dynamicMapper.updateDynamic(dynamic);
	}

	/**
	 * 删除动态运行记录对象
	 * 
	 * @param ids
	 *            需要删除的数据ID
	 * @return 结果
	 */
	@Override
	public int deleteDynamicByIds(String ids) {
		return dynamicMapper.deleteDynamicByIds(Convert.toStrArray(ids));
	}

	/**
	 * 根据类型查询动态运行信息
	 */
	@Override
	public List<Map<String, Object>> selectCompanyChecktableList(DynamicEntity dynamicEntity) {
		return dynamicMapper.selectCompanyChecktableList(dynamicEntity);
	}

	/**
	 * 查询动态运行记录及附件信息
	 */
	@Override
	public DynamicEntity selectDynamicAndFileById(Long dynamicsId) {
		return dynamicMapper.selectDynamicAndFileById(dynamicsId);
	}

	/**
	 * 批量插入
	 */
	@Override
	public int insertDynamicBatch(List<DynamicEntity> DynamicEntity) {
		return dynamicMapper.insertDynamicBatch(DynamicEntity);
	}

}
