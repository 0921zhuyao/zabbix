package com.jd.project.module.admin.standard.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.jd.common.support.Convert;
import com.jd.common.utils.StringUtils;
import com.jd.common.utils.security.ShiroUtils;
import com.jd.framework.web.service.BaseService;
import com.jd.project.module.admin.standard.entity.CheckContentTypeEntity;
import com.jd.project.module.admin.standard.mapper.CheckContentTypeMapper;

/**
 * 检查内容分类 服务层实现
 * 
 * @author TrevorPhilips
 * @date 2018-11-21
 */
@Service
@Transactional(rollbackFor = Exception.class)
public class CheckContentTypeServiceImpl extends BaseService implements CheckContentTypeService {
	@Autowired
	private CheckContentTypeMapper checkContentTypeMapper;

	/**
	 * 查询检查内容分类信息
	 * 
	 * @param contentTypeId
	 *            检查内容分类ID
	 * @return 检查内容分类信息
	 */
	@Override
	@Transactional(propagation=Propagation.NOT_SUPPORTED)
	public CheckContentTypeEntity selectCheckContentTypeById(Long contentTypeId) {
		return checkContentTypeMapper.selectCheckContentTypeById(contentTypeId);
	}

	/**
	 * 查询检查内容分类列表
	 * 
	 * @param checkContentType
	 *            检查内容分类信息
	 * @return 检查内容分类集合
	 */
	@Override
	@Transactional(propagation=Propagation.NOT_SUPPORTED)
	public List<CheckContentTypeEntity> selectCheckContentTypeList(CheckContentTypeEntity checkContentType) {
		return checkContentTypeMapper.selectCheckContentTypeList(checkContentType);
	}

	/**
	 * 新增检查内容分类
	 * 
	 * @param checkContentType
	 *            检查内容分类信息
	 * @return 结果
	 */
	@Override
	public int insertCheckContentType(CheckContentTypeEntity checkContentType) {
		initCteateParam(checkContentType);
		return checkContentTypeMapper.insertCheckContentType(checkContentType);
	}

	/**
	 * 修改检查内容分类
	 * 
	 * @param checkContentType
	 *            检查内容分类信息
	 * @return 结果
	 */
	@Override
	public int updateCheckContentType(CheckContentTypeEntity checkContentType) {
		initUpdateParam(checkContentType);
		System.out.println(checkContentType.toString());
		return checkContentTypeMapper.updateCheckContentType(checkContentType);
	}

	/**
	 * 删除检查内容分类对象
	 * 
	 * @param ids
	 *            需要删除的数据ID
	 * @return 结果
	 * @throws Exception 
	 */
	@Override
	public int deleteCheckContentTypeByIds(String ids) throws Exception {
		Long[] contentTypeIds = Convert.toLongArray(ids);
		for (Long contentTypeId : contentTypeIds) {
			CheckContentTypeEntity checkContentTypeEntity = selectCheckContentTypeById(contentTypeId);
			if (checkContentTypeMapper.countCheckContentTypeById(contentTypeId) > 0) {
				throw new Exception(String.format("%1$s已分配,不能删除", checkContentTypeEntity.getContentTypeName()));
			}
		}
		return checkContentTypeMapper.deleteCheckContentTypeByIds(Convert.toStrArray(ids));
	}

	/**
	 * 根据id查询子数据
	 *
	 * @param id
	 *            父节点ID
	 * @return CheckContentTypeEntity
	 */
	@Transactional(propagation=Propagation.NOT_SUPPORTED)
	public List<CheckContentTypeEntity> selectCheckContentTypeByParent(Long id) {
		return checkContentTypeMapper.selectCheckContentTypeList(new CheckContentTypeEntity(id));
	};

	private void initCteateParam(CheckContentTypeEntity checkContentType) {
		checkContentType.setCreateUser(ShiroUtils.getUserId());
		initUpdateParam(checkContentType);
	}

	private void initUpdateParam(CheckContentTypeEntity checkContentType) {
		checkContentType.setUpdateUser(ShiroUtils.getUserId());
	}

	/**
	 * 校验分类编码
	 * @param checkContentType
	 * @return
	 */
	@Override
	public boolean checkContentTypeCodeUnique(CheckContentTypeEntity checkContentType) {
		Long checkContentId = StringUtils.isNull(checkContentType.getContentTypeId()) ? -1L : checkContentType.getContentTypeId();
		CheckContentTypeEntity checkContentTypeEntity = checkContentTypeMapper.checkContentTypeCodeUnique(checkContentType.getContentTypeCode());
        if (StringUtils.isNotNull(checkContentTypeEntity) && checkContentTypeEntity.getContentTypeId().longValue() != checkContentId.longValue()) {
            return false;
        }
        return true;
	}
}
